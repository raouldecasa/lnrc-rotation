import time
import traceback
from web3 import Web3
from telegram import Bot

# ‚úÖ Chargement s√©curis√© des variables d‚Äôenvironnement
import os
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
CONTRACT_ADDRESS = os.getenv("CONTRACT_ADDRESS")
RPC_URL = os.getenv("RPC_URL")

bot = Bot(token=BOT_TOKEN)
web3 = Web3(Web3.HTTPProvider(RPC_URL))
contract = web3.eth.contract(address=Web3.to_checksum_address(CONTRACT_ADDRESS), abi=[])

# ‚úÖ Logique principale d‚ÄôIA de surveillance
def start_monitoring():
    while True:
        try:
            # üîé Exemple de v√©rification d‚Äôactivit√© du contrat
            latest_block = web3.eth.block_number
            print(f"[AI Monitor] Bloc actuel : {latest_block}")
            
            # üîî Simule une alerte
            bot.send_message(chat_id=CHAT_ID, text=f"[AI MONITOR] Bloc actuel : {latest_block}")
            
            # ‚è±Ô∏è Pause de 60s entre chaque check
            time.sleep(60)
        
        except Exception as inner_error:
            error_details = traceback.format_exc()
            print(f"[AI ERROR] Erreur pendant la surveillance :\n{error_details}")
            bot.send_message(chat_id=CHAT_ID, text=f"[ALERTE] Une erreur est survenue dans AI_MONITOR ü§ñ\n{inner_error}")
            time.sleep(30)  # √©vite la boucle d‚Äôerreur infinie

# ‚úÖ Protection globale anti-crash
if __name__ == "__main__":
    try:
        print("[AI MONITOR] D√©marrage de la surveillance s√©curis√©e LNRC üõ°Ô∏è")
        start_monitoring()
    except Exception as e:
        error_trace = traceback.format_exc()
        print(f"[FATAL ERROR] Impossible de d√©marrer AI_MONITOR:\n{error_trace}")
        bot.send_message(chat_id=CHAT_ID, text=f"üö® [FATAL] AI_MONITOR a crash√© d√®s le lancement\n{e}")
